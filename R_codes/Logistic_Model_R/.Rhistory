x
# x is the sample data from the GPD
f <- function(x) {n <- length(x);
x <- sort(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
f(x)
x[95,:]
x[95:]
x[95::]
x[95]
x[100]
x[95:100]
# x is the sample data from the GPD
f <- function(x)
{n <- length(x);
x <- sort(x)
##modification for tails
upper=floor(0.95*n)
x <- x[upper:n]-x[upper]
n <- length(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
x=runif(2000, min = 0, max = 1)
f(x)
x=runif(200000, min = 0, max = 1)
f(x)
x=rt(2000, 5)
f(x)
# x is the sample data from the GPD
f <- function(x)
{n <- length(x);
x <- sort(x)
##modification for tails
upper=floor(0.95*n)
x <- x[upper:n]-x[upper]
n <- length(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
x=rt(2000, 5)
f(x)
# x is the sample data from the GPD
f <- function(x)
{n <- length(x);
x <- sort(x)
##modification for tails
#upper=floor(0.95*n)
#x <- x[upper:n]-x[upper]
#n <- length(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
x=rt(2000, 5)
f(x)
# x is the sample data from the GPD
f <- function(x)
{n <- length(x);
x <- sort(x)
##modification for tails
upper=floor(0.95*n)
x <- x[upper:n]-x[upper]
n <- length(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
x=rt(2000, 5)
f(x)
x=rt(200000, 5)
f(x)
# x is the sample data from the GPD
f <- function(x)
{n <- length(x);
x <- sort(x)
##modification for tails
upper=floor(0.95*n)
#x <- x[upper:n]-x[upper]
x <- x[upper:n]
n <- length(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
x=rt(200000, 5)
f(x)
# x is the sample data from the GPD
f <- function(x)
{n <- length(x);
x <- sort(x)
##modification for tails
upper=floor(0.95*n)
x <- x[upper:n]-x[upper]
#x <- x[upper:n]
n <- length(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
x=rt(20000, 5)
f(x)
# x is the sample data from the GPD
f <- function(x)
{n <- length(x);
x <- sort(x)
##modification for tails
upper=floor(0.95*n)
#x <- x[upper:n]-x[upper]
x <- x[upper:n]
n <- length(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
x=rt(20000, 5)
f(x)
x=runif(200000, min = 0, max = 1)
f(x)
# x is the sample data from the GPD
f <- function(x)
{n <- length(x);
x <- sort(x)
##modification for tails
upper=floor(0.95*n)
#x <- x[upper:n]-x[upper]
x <- x[upper:n]
n <- length(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
x=runif(200000, min = 0, max = 1)
f(x)
# x is the sample data from the GPD
f <- function(x)
{n <- length(x);
x <- sort(x)
##modification for tails
upper=floor(0.95*n)
x <- x[upper:n]-x[upper]
#x <- x[upper:n]
n <- length(x)
lx <- function(b, x)
{k <- -mean(log(1-b*x));
log(b/k)+k-1}
m <- 20 + floor(sqrt(n))
b <- w <- L <- 1/x[n]+(1-sqrt(m/(1:m-.5)))/3/x[floor(n/4+.5)]
for (i in 1:m) L[i] <- n*lx(b[i],x)
for (i in 1:m)
w[i]<- 1/sum(exp(L-L[i]))
b <- sum(b*w)
k <- -mean(log(1-b*x)); sigma <- k/b ; list(sigma=sigma, k=k)};
x=runif(200000, min = 0, max = 1)
f(x)
x=rt(20000, 5)
f(x)
X
library(rstan)
library(matrixStats)
rstan_options(auto_write = TRUE)
options(mc.cores = 1)
#### Setting random seed
nrep <- 1
seed <- 77
batch <- 1
SEED = seed + nrep*(batch - 1)
set.seed(SEED)
data = read.csv("./Preprocessed_data/Voice_preprocessed.csv")
y <- data$y
X <- data[2:length(data)]
n = dim(X)[1]
k = dim(X)[2]
scaled_var = sqrt(50/k)
standata = list(n = n, k = k, X = as.matrix(X), y = c(y), scaled_var = scaled_var)
control = list(max_treedepth=10)
n_iter = 2000
stancode_mixture <- "
data {
int n;
int k;
int<lower=0, upper=1> y[n];
matrix [n,k] X;
real scaled_var;
}
parameters {
vector[k] beta;
}
model{
vector[n] means=X*beta;
vector[n] log_lik;
for (index in 1:n){
log_lik[index]= bernoulli_logit_lpmf(y[index] | means[index]);
}
target += double_exponential_lpdf(beta | 0, scaled_var);
target += sum(log_lik);
target += log_sum_exp(-log_lik);
}
generated quantities {
vector[n] means=X*beta;
vector[n] log_lik;
for (nn in 1:n)
log_lik[nn] = bernoulli_logit_lpmf(y[nn] | means[nn]);
}
"
## Mixture estimator
stanmodel_mix = stan_model(model_code = stancode_mixture)
fit_mix <- sampling(stanmodel_mix, data = standata, chains = 4, iter = n_iter,control = control, pars="log_lik")
log_lik_mix = extract(fit_mix)$log_lik
l_common_mix = rowLogSumExps(-1*log_lik_mix)
log_weights = -1*log_lik_mix - l_common_mix
lppd_mix = logSumExp(-l_common_mix) - rowLogSumExps(t(log_weights))
lik_mix = exp(log_weights)
ws = exp(log_weights)
ws_norm = apply(ws, 2, function(x){x/sum(x)})
f_var = lik_mix - exp(lppd_mix)
as_std_log = (colSums(ws_norm^2 * f_var^2)/(exp(lppd_mix)^2))^(1/2)
plot(as_std_log)
## Mixture estimator
stanmodel_mix = stan_model(model_code = stancode_mixture)
fit_mix <- sampling(stanmodel_mix, data = standata, chains = 1, iter = 4000,control = control, pars="log_lik")
log_lik_mix = extract(fit_mix)$log_lik
l_common_mix = rowLogSumExps(-1*log_lik_mix)
log_weights = -1*log_lik_mix - l_common_mix
lppd_mix = logSumExp(-l_common_mix) - rowLogSumExps(t(log_weights))
lik_mix = exp(log_weights)
ws = exp(log_weights)
ws_norm = apply(ws, 2, function(x){x/sum(x)})
f_var = lik_mix - exp(lppd_mix)
as_std_log = (colSums(ws_norm^2 * f_var^2)/(exp(lppd_mix)^2))^(1/2)
plot(as_std_log)
## Mixture estimator
stanmodel_mix = stan_model(model_code = stancode_mixture)
fit_mix <- sampling(stanmodel_mix, data = standata, chains = 4, iter = 4000,control = control, pars="log_lik")
log_lik_mix = extract(fit_mix)$log_lik
l_common_mix = rowLogSumExps(-1*log_lik_mix)
log_weights = -1*log_lik_mix - l_common_mix
lppd_mix = logSumExp(-l_common_mix) - rowLogSumExps(t(log_weights))
lik_mix = exp(log_weights)
ws = exp(log_weights)
ws_norm = apply(ws, 2, function(x){x/sum(x)})
f_var = lik_mix - exp(lppd_mix)
as_std_log = (colSums(ws_norm^2 * f_var^2)/(exp(lppd_mix)^2))^(1/2)
plot(as_std_log)
library("loo")
library(rstan)
library(matrixStats)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
#### Setting random seed
nrep <- 1
seed <- 77
batch <- 1
SEED = seed + nrep*(batch - 1)
set.seed(SEED)
## Load the dats
data = read.csv("./Preprocessed_data/Voice_preprocessed.csv")
y <- data$y
X <- data[2:length(data)]
N = dim(X)[1]
P = dim(X)[2]
scaled_var = sqrt(50/P)
standata = list(N = N, P = P, X = as.matrix(X), y = c(y), scaled_var = scaled_var)
stancode_posterior <- "
data {
int <lower=0> N;
int <lower=0> P;
int <lower=0, upper=1> y[N];
matrix [N,P] X;
real <lower=0> scaled_var;
}
parameters {
vector[P] beta;
}
model{
vector[N] means=X*beta;
vector[N] log_lik;
for (index in 1:N){
log_lik[index]= bernoulli_logit_lpmf(y[index] | means[index]);
}
target += double_exponential_lpdf(beta | 0, scaled_var);
target += sum(log_lik);
}
generated quantities {
vector[N] means=X*beta;
vector[N] log_lik;
for (nn in 1:N)
log_lik[nn] = bernoulli_logit_lpmf(y[nn] | means[nn]);
}
"
control = list(max_treedepth=10)
n_iter = 2000
stanmodel_post = stan_model(model_code=stancode_posterior)
## Sampling from the posterior
stanmodel_post = stan_model(model_code=stancode_posterior)
fit_post <- sampling(stanmodel_post, data = standata, chains = 4, iter = n_iter, control = control, pars="log_lik")
log_lik_post = extract(fit_post)$log_lik
aux = log_lik_post
dim(log_lik_post) <- c(4, dim(log_lik_post)[1]/4, dim(log_lik_post)[2])
r_eff <-  relative_eff(exp(log_lik_post))
psis_result <- psis(-log_lik_post, r_eff=r_eff)
lw_psis = weights(psis_result, normalize=FALSE)
lppd_psis = colLogSumExps(lw_psis + aux) - colLogSumExps(lw_psis)
stancode_mixture <- "
data {
int <lower=0> N;
int <lower=0> P;
int <lower=0, upper=1> y[N];
matrix [N,P] X;
real <lower=0> scaled_var;
}
parameters {
vector[P] beta;
}
model{
vector[N] means=X*beta;
vector[N] log_lik;
for (index in 1:N){
log_lik[index]= bernoulli_logit_lpmf(y[index] | means[index]);
}
target += double_exponential_lpdf(beta | 0, scaled_var);
target += sum(log_lik);
target += log_sum_exp(-log_lik);
}
generated quantities {
vector[N] means=X*beta;
vector[N] log_lik;
for (nn in 1:N)
log_lik[nn] = bernoulli_logit_lpmf(y[nn] | means[nn]);
}
"
stanmodel_mix = stan_model(model_code = stancode_mixture)
fit_mix <- sampling(stanmodel_mix, data = standata, iter = n_iter, control = control, pars="log_lik")
log_lik_mix = extract(fit_mix)$log_lik
l_common_mix = rowLogSumExps(-log_lik_mix)
log_weights = -log_lik_mix - l_common_mix
lppd_mix = logSumExp(-l_common_mix) - rowLogSumExps(t(log_weights))
plot(lppd_psis, lppd_mix)
qqplot(lppd_psis, lppd_mix)
check = read_csv('results_voice_loo_bk.csv')
check = read.csv('results_voice_loo_bk.csv')
setwd("~/Desktop/OneDrive/Phd/cleaning_up_codes_article/R_codes/Logistic_Model_R")
check = read.csv('results_voice_loo_bk.csv')
check
check[1]
View(check)
check = read.csv('loo_bk_50k.csv')
check[1]
check = read.csv('loo_bk_50k.csv', header=None)
check = read.csv('loo_bk_50k.csv', header=0)
check
check['V1']
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
plot(lppd_psis, lppd_bk)
read.csv('loo_bk_50k.csv', header=0)['V1']
aux=read.csv('loo_bk_50k.csv', header=0)['V1']
aux
aux.values
aux.vals
aux[1:]
aux[1]
aux[1][1:]
aux[1,:]
aux[1,]
aux$V1
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
plot(lppd_psis, lppd_bk$V1)
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
plot(lppd_psis, lppd_bk$V1)
plot(lppd_mix, lppd_bk$V1)
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
plot(lppd_psis, lppd_bk$V1, xlim=c(min(lppd_bk$V1, 0)), ylim=c(min(lppd_bk$V1, 0)))
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
qqplot(lppd_psis, lppd_bk$V1, xlim=c(min(lppd_bk$V1, 0)), ylim=c(min(lppd_bk$V1, 0)))
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
plot(lppd_psis, lppd_bk$V1)
lines(lppd_bk$V1, lppd_bk$V1)
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_psis, lppd_mix, xlim=c(-5, 0))
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_psis, lppd_mix, xlim=c(-5, 0), ylim=c(-5, 0))
min(lppd_mix)
min(lppd_bk$V1)
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_psis, lppd_mix, xlim=c(-4.4, 0), ylim=c(-4.4, 0))
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.4, 0), ylim=c(-4.4, 0))
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.55, 0), ylim=c(-4.55, 0))
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.55, 0), ylim=c(-4.55, 0))
lines(lppd_bk$V1, lppd_bk$V1)
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.5, 0), ylim=c(-4.5, 0))
lines(lppd_bk$V1, lppd_bk$V1)
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.5, 0), ylim=c(-4.5, 0))
#lines(lppd_bk$V1, lppd_bk$V1)
lines(c(-4.5,0), c(-4.5, 0))
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.5, 0), ylim=c(-4.5, 0))
#lines(lppd_bk$V1, lppd_bk$V1)
lines(c(-4.8,0.2), c(-4.8, 0.2))
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.5, 0), ylim=c(-4.5, 0))
#lines(lppd_bk$V1, lppd_bk$V1)
lines(c(-4.8,0.2), c(-4.8, 0.2), color='red')
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.5, 0), ylim=c(-4.5, 0))
#lines(lppd_bk$V1, lppd_bk$V1)
lines(c(-4.8,0.2), c(-4.8, 0.2), col='red')
plot(lppd_bk$V1, lppd_psis, xlim=c(-4.5, 0), ylim=c(-4.5, 0))
lines(c(-4.8,0.2), c(-4.8, 0.2), col='red')
plot(lppd_bk$V1, lppd_psis, xlim=c(-4.5, 0), ylim=c(-4.5, 0), xlab="")
lines(c(-4.8,0.2), c(-4.8, 0.2), col='red')
plot(lppd_bk$V1, lppd_psis, xlim=c(-4.5, 0), ylim=c(-4.5, 0), xlab="", ylab="")
lines(c(-4.8,0.2), c(-4.8, 0.2), col='red')
plot(lppd_bk$V1, lppd_psis, xlim=c(-4.5, 0), ylim=c(-4.5, 0), main="PSIS estimators", xlab="", ylab="")
lines(c(-4.8,0.2), c(-4.8, 0.2), col='red')
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.5, 0), ylim=c(-4.5, 0))
#lines(lppd_bk$V1, lppd_bk$V1)
lines(c(-4.8,0.2), c(-4.8, 0.2), col='red', main="PSIS estimators", xlab="", ylab="")
lppd_bk = read.csv('loo_bk_50k.csv', header=0)['V1']
#plot(lppd_psis, lppd_bk$V1)
#lines(lppd_bk$V1, lppd_bk$V1)
plot(lppd_bk$V1, lppd_mix, xlim=c(-4.5, 0), ylim=c(-4.5, 0), main="Mixture estimators", xlab="", ylab="")
#lines(lppd_bk$V1, lppd_bk$V1)
lines(c(-4.8,0.2), c(-4.8, 0.2), col='red', )
